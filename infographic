#
# Author: Adrian Martinez
# Description: program inputs text file and
#

import os, sys

cwd = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, cwd)
from graphics import graphics

def main():
    file_name = input('file input name: \n')
    text_file = open(file_name, 'r').readlines()
    cap_lst, punct_lst, word_count = dict_creation(text_file)
    size_lst = word_counts(word_count)
    output_string = ''
    for size in size_lst:
        output_string += most_used(size)
    master_lst = [size_lst, cap_lst, punct_lst]
    table(graphics, file_name, word_count, output_string, master_lst)
    print(len(master_lst[0][0]))
    print(len(master_lst[0][1]))
    print(master_lst[1][0])
    print(master_lst[2][0])

def dict_creation(text_file):
    word_list = []
    word_count = {}
    capital_set = set()
    punctuation_set = set()
    for line in text_file:
        if line != '\n':
            words = line.strip('\n').split(' ')
            for word in words:
                word_list.append(word)
    for words in word_list:
        if words not in word_count:
            word_count[words] = 0
            if words[0].isupper():
                capital_set.add(words)
            if words[-1] in ',.?!':
                punctuation_set.add(words)
        word_count[words] += 1
    cap_lst = [len(capital_set)]
    punct_lst = [len(punctuation_set)]
    return cap_lst, punct_lst, word_count

def word_counts(word_count):
    size_lst = []
    word_size_small = {}
    word_size_medium = {}
    word_size_large = {}
    for word,values in word_count.items():
        if len(word) <= 4:
            word_size_small[word] = values
        elif 5 <= len(word) <= 7:
            word_size_medium[word] = values
        elif len(word) >= 8:
            word_size_large[word] = values
    size_lst.append(word_size_small)
    size_lst.append(word_size_medium)
    size_lst.append(word_size_large)
    return size_lst

def most_used(size):
    biggest_number = 0
    common_word = ' '
    for word,value in size.items():
        if value > biggest_number:
            biggest_number = value
            common_word = word
    output_string = (common_word + ' (' + str(biggest_number) + 'x) ')
    return output_string

def table(graphics, file_name, word_count, output_string, master_lst):
    gui = graphics(650, 700, 'infographic')
    gui.rectangle(0, 0, 650, 700, 'grey')
    gui.text(50, 50, file_name, 'cyan', 45)
    gui.text(50, 75, 'Total Unique Words: ', 'white', 45)
    gui.text(60, 75, len(word_count), 'white', 45)
    gui.text(50, 100, 'Most Used Words(s/m/l):  ','white', 20)
    gui.text(75, 100, output_string, 'cyan', 40)
    length_graph(gui, master_lst)


def length_graph(gui, master_lst):
    offset = 0
    width = 125
    x = offset * width + 25
    row_total = 0
    for i in range(0, 3):
        row_total += len(master_lst[0][i])
    print(row_total)
    print((450//row_total)+len(master_lst[0][0]))
    print(x)
    gui.text(x, 95, 'Word lengths', 'white', 45)
    gui.rectangle(x, 135, 125, 450, 'blue')
    gui.text(x + 5, 140,'small words','white', 10)
    gui.rectangle(x, ((450//row_total)+len(master_lst[0][0]), 125, ((450//row_total)+len(master_lst[0][0])),'green'))
    gui.text(x + 5, ((450//row_total)+len(master_lst[0][0])+5), 'medium words', 'white', 10)
    gui.rectangle(x, ((450//row_total)+len(master_lst[0][1])),125,((450//row_total)+len(master_lst[0][1])),
                  'green')
    gui.text(x + 5, ((450/row_total)+len(master_lst[0][1])+5), 'large words', 'white', 10)
    gui.text(1*width+25, 95, 'Cap/Non-Cap', 'white', 45)
    gui.rectangle(1*width+25, 135, 125, 450, 'blue')
    gui.text(1*width+30, 140,'Capitalized','white', 10)
    gui.rectangle(x,((450//row_total)+master_lst[1][0]),125,((450//row_total)+master_lst[1][0]),
                  'green')
    gui.text(1*width+30,((450//row_total)+master_lst[1][0]+5),'Non Capitalized','white',10)
    gui.text(2*width+25, 95, 'Punct/Non-Punct', 'white', 45)
    gui.rectangle(1*width+25, 135, 125, 450, 'blue')
    gui.text(2*width+30, 140, 10, 'Punctuated', 10)
    gui.rectangle(2*width+25,((450//row_total)+master_lst[2][0]),125,((450//row_total)+
                                                                               master_lst[2][0]),'green')
    gui.text(2*width+30,((450//row_total)+master_lst[2][0]+5),'Non Punctuated','white',10)

main()
